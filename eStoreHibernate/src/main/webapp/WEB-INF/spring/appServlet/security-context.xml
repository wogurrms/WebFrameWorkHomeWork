<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
	http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- Bean 등록시 web.xml에 반드시 등록해야 ContextLoadListener가 수행이 되면서 Bean을 읽는다-->
<!-- cf. DispatcherServlet에서 읽는 Bean은 따로 web.xml에 등록한다. -->
<!-- security관련 Namespace 생성 -->

<!-- Security는 2가지다
	첫째, 인증(Authentication)
	둘째, 권한(Authorization) -->


<!-- 인증(Authentication) : Spring-security에 sql문을 작성해야한다. DB의 user테이블, authority테이블을 조회해서 인증 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service 
				data-source-ref="dataSource"
				users-by-username-query="select username, password, enabled from users where username=?"
				authorities-by-username-query="select username, authority from users where username=?"/>
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>
	
<!-- 권한(Authorization) : /admin/이하 페이지에 대해 ROLE_ADMIN 권한을 가진 사용자에게 권한을 부여 -->
	<security:http auto-config="true" use-expressions="true">
		<security:intercept-url 
			pattern="/admin/**"
			access="hasRole('ROLE_ADMIN')" />
		<!-- 권한이 없는 경우 해당 url로 request를 보냄 -->
		<security:form-login 
			login-page="/login"
			authentication-failure-url="/login?error=1" />
	</security:http>
	
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	</bean>
</beans>
